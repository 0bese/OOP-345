/*
 Reflection
 Name: Kojo Anyane Obese
 Email: kaobese@myseneca.ca
 Student ID: 137653226
 Date: 9 July 2024
 */

Deallocating Dynamically Allocated Memory
It's crucial to deallocate dynamically allocated memory in the vector of resources (m_contents) to prevent memory leaks. In the Directory class destructor and other relevant methods (like remove), each resource is properly deleted using delete.

Special C++ Operation for Directory Objects
To call specific functions for Directory objects stored in Resource *, such as find or remove, dynamic casting is used. This allows treating the base class pointer (Resource *) as a derived class pointer (Directory *) to access specialized functionalities unique to directories.

Choice Between std::vector<Resource *> and std::vector<Resource>
Using std::vector<Resource *> is necessary because it allows polymorphic behavior. Storing Resource * pointers enables storing objects of derived types (File and Directory) in a homogeneous way, facilitating dynamic polymorphism and runtime polymorphic behavior. This is essential for handling directories and files uniformly within the filesystem operations.

By following these guidelines and implementing the required functionalities, the solution satisfies the workshop requirements for managing a UNIX-like filesystem using polymorphic objects stored in STL containers.